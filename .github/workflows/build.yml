name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  integration:
    name: "Integration"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        extensions: ["scoutapm", ""]
        laravel-version:
          - "5.5.*"
          - "6.*"
          - "7.*"
          - "8.*"
        php-version:
          - "7.1"
          - "7.2"
          - "7.3"
          - "7.4"
        exclude:
          - {php-version: "7.1", laravel-version: "6.*"} # Laravel 6 requires 7.2+
          - {php-version: "7.1", laravel-version: "7.*"} # Laravel 7 requires 7.2+
          - {php-version: "7.1", laravel-version: "8.*"} # Laravel 8 requires 7.3+
          - {php-version: "7.2", laravel-version: "8.*"} # Laravel 8 requires 7.3+
    env:
      SCOUT_APM_KEY: ${{ secrets.SCOUT_APM_KEY }}
    steps:
      - uses: actions/checkout@v2
        with:
          path: scout-apm-laravel
      - name: "Install PHP"
        uses: shivammathur/setup-php@v2
        with:
          coverage: "none"
          php-version: "${{ matrix.php-version }}"
          tools: pecl
          extensions: ${{ matrix.extensions }}
      - name: "Install Laravel quickstart project"
        run: "composer create-project laravel/laravel:${{ matrix.laravel-version}} test-app --prefer-dist"
      - name: "Add scout-apm-laravel as a repository"
        run: cd test-app && composer config repositories.scout path ../scout-apm-laravel
      - name: "Require scout-apm-laravel current checkout"
        run: cd test-app && composer require scoutapp/scout-apm-laravel:*@dev composer/package-versions-deprecated
      - name: "Publish the provider"
        run: cd test-app && php artisan vendor:publish --provider="Scoutapm\Laravel\Providers\ScoutApmServiceProvider"
      - name: "Configure Scout"
        run: cd test-app && echo -e "\nSCOUT_KEY=\"\${SCOUT_APM_KEY}\"\nSCOUT_NAME=\"My Laravel App\"\nSCOUT_MONITOR=true" >> .env
      - name: "Load the index page to trigger instrumentation"
        run: |
          cd test-app
          cat .env
          php artisan serve &
          sleep 2
          wget http://localhost:8000
      - name: "Check logs for successful payload send"
        run: |
          cd test-app
          cat storage/logs/laravel.log
          grep -q "local.DEBUG: \[Scout\] Sent whole payload successfully to core agent." storage/logs/laravel.log

  tests:
    name: "Run tests"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        extensions: ["scoutapm", ""]
        laravel-version:
          - "5.5.*"
          - "6.*"
          - "7.*"
          - "8.*"
        php-version:
          - "7.1"
          - "7.2"
          - "7.3"
          - "7.4"
        exclude:
          - { php-version: "7.1", laravel-version: "6.*" } # Laravel 6 requires 7.2+
          - { php-version: "7.1", laravel-version: "7.*" } # Laravel 7 requires 7.2+
          - { php-version: "7.1", laravel-version: "8.*" } # Laravel 8 requires 7.3+
          - { php-version: "7.2", laravel-version: "8.*" } # Laravel 8 requires 7.3+
    steps:
      - uses: actions/checkout@v2
      - name: "Install PHP"
        uses: shivammathur/setup-php@v2
        with:
          coverage: "none"
          php-version: "${{ matrix.php-version }}"
          tools: pecl
          extensions: ${{ matrix.extensions }}
      # --no-update then a full `composer update` is needed to overcome locked dependencies
      # See: https://github.com/composer/composer/issues/9561
      - name: "Require specific Laravel version ${{ matrix.laravel-version}}"
        run: "composer require laravel/framework:${{ matrix.laravel-version}} --no-update --no-interaction --prefer-dist --prefer-stable"
      - name: "Composer update with new requirements"
        run: "composer update --no-interaction --prefer-dist --prefer-stable"
      - name: "Run PHPUnit test suite"
        run: "vendor/bin/phpunit"

  cs:
    name: "Check coding standards"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: "Install PHP"
        uses: shivammathur/setup-php@v2
        with:
          coverage: "none"
          php-version: "7.4"
      - name: "Install dependencies"
        run: "composer install"
      - name: "Run PHP_CodeSniffer"
        run: "vendor/bin/phpcs"

  static-analysis:
    name: "Perform static analysis"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: "Install PHP"
        uses: shivammathur/setup-php@v2
        with:
          coverage: "none"
          php-version: "7.4"
      - name: "Install dependencies"
        run: "composer install"
      - name: "Run Psalm"
        run: "vendor/bin/psalm"
